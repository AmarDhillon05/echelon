{"ast":null,"code":"import pako from 'pako';\n\n//These are for sluggificaiton\n\nexport function decompressToBase64(base64, mimeType = 'application/octet-stream') {\n  if (base64.base64) {\n    base64 = base64.base64;\n  }\n  // Restore standard base64\n  let paddedBase64 = base64.replace(/-/g, '+').replace(/_/g, '/');\n  while (paddedBase64.length % 4 !== 0) {\n    paddedBase64 += '=';\n  }\n\n  // Convert base64 to Uint8Array\n  const compressedBytes = base64ToUint8Array(paddedBase64);\n\n  // Decompress using pako (inflate)\n  const decompressedBytes = pako.inflate(compressedBytes);\n\n  // Convert back to base64 for data URI\n  const decompressedBase64 = uint8ArrayToBase64(decompressedBytes);\n  return `data:${mimeType};base64,${decompressedBase64}`;\n}\nexport function base64ToUint8Array(base64) {\n  const binary = atob(base64);\n  const len = binary.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n  return bytes;\n}\nexport function uint8ArrayToBase64(uint8Array) {\n  // Avoids call stack limits by processing in chunks\n  let binary = '';\n  const len = uint8Array.length;\n  const chunkSize = 0x8000;\n  for (let i = 0; i < len; i += chunkSize) {\n    binary += String.fromCharCode.apply(null, uint8Array.subarray(i, i + chunkSize));\n  }\n  return btoa(binary);\n}","map":{"version":3,"names":["pako","decompressToBase64","base64","mimeType","paddedBase64","replace","length","compressedBytes","base64ToUint8Array","decompressedBytes","inflate","decompressedBase64","uint8ArrayToBase64","binary","atob","len","bytes","Uint8Array","i","charCodeAt","uint8Array","chunkSize","String","fromCharCode","apply","subarray","btoa"],"sources":["/home/adhillon053/echelon/client/src/utils/slug.js"],"sourcesContent":["import pako from 'pako'\n\n\n//These are for sluggificaiton\n\nexport function decompressToBase64(base64, mimeType = 'application/octet-stream') {\n    if(base64.base64){\n      base64 = base64.base64\n    }\n    // Restore standard base64\n    let paddedBase64 = base64.replace(/-/g, '+').replace(/_/g, '/');\n    while (paddedBase64.length % 4 !== 0) {\n      paddedBase64 += '=';\n    }\n\n    // Convert base64 to Uint8Array\n    const compressedBytes = base64ToUint8Array(paddedBase64);\n\n    // Decompress using pako (inflate)\n    const decompressedBytes = pako.inflate(compressedBytes);\n\n    // Convert back to base64 for data URI\n    const decompressedBase64 = uint8ArrayToBase64(decompressedBytes);\n\n    return `data:${mimeType};base64,${decompressedBase64}`;\n  }\n\nexport function base64ToUint8Array(base64) {\n    const binary = atob(base64);\n    const len = binary.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n  }\n\n\nexport function uint8ArrayToBase64(uint8Array) {\n    // Avoids call stack limits by processing in chunks\n    let binary = '';\n    const len = uint8Array.length;\n    const chunkSize = 0x8000;\n    for (let i = 0; i < len; i += chunkSize) {\n      binary += String.fromCharCode.apply(\n        null,\n        uint8Array.subarray(i, i + chunkSize)\n      );\n    }\n    return btoa(binary);\n  }\n     "],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;;AAGvB;;AAEA,OAAO,SAASC,kBAAkBA,CAACC,MAAM,EAAEC,QAAQ,GAAG,0BAA0B,EAAE;EAC9E,IAAGD,MAAM,CAACA,MAAM,EAAC;IACfA,MAAM,GAAGA,MAAM,CAACA,MAAM;EACxB;EACA;EACA,IAAIE,YAAY,GAAGF,MAAM,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAC/D,OAAOD,YAAY,CAACE,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IACpCF,YAAY,IAAI,GAAG;EACrB;;EAEA;EACA,MAAMG,eAAe,GAAGC,kBAAkB,CAACJ,YAAY,CAAC;;EAExD;EACA,MAAMK,iBAAiB,GAAGT,IAAI,CAACU,OAAO,CAACH,eAAe,CAAC;;EAEvD;EACA,MAAMI,kBAAkB,GAAGC,kBAAkB,CAACH,iBAAiB,CAAC;EAEhE,OAAO,QAAQN,QAAQ,WAAWQ,kBAAkB,EAAE;AACxD;AAEF,OAAO,SAASH,kBAAkBA,CAACN,MAAM,EAAE;EACvC,MAAMW,MAAM,GAAGC,IAAI,CAACZ,MAAM,CAAC;EAC3B,MAAMa,GAAG,GAAGF,MAAM,CAACP,MAAM;EACzB,MAAMU,KAAK,GAAG,IAAIC,UAAU,CAACF,GAAG,CAAC;EACjC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,EAAEG,CAAC,EAAE,EAAE;IAC5BF,KAAK,CAACE,CAAC,CAAC,GAAGL,MAAM,CAACM,UAAU,CAACD,CAAC,CAAC;EACjC;EACA,OAAOF,KAAK;AACd;AAGF,OAAO,SAASJ,kBAAkBA,CAACQ,UAAU,EAAE;EAC3C;EACA,IAAIP,MAAM,GAAG,EAAE;EACf,MAAME,GAAG,GAAGK,UAAU,CAACd,MAAM;EAC7B,MAAMe,SAAS,GAAG,MAAM;EACxB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,EAAEG,CAAC,IAAIG,SAAS,EAAE;IACvCR,MAAM,IAAIS,MAAM,CAACC,YAAY,CAACC,KAAK,CACjC,IAAI,EACJJ,UAAU,CAACK,QAAQ,CAACP,CAAC,EAAEA,CAAC,GAAGG,SAAS,CACtC,CAAC;EACH;EACA,OAAOK,IAAI,CAACb,MAAM,CAAC;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}